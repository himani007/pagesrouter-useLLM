import { OpenAIMessage, ChatStreamCallback, LLMChatResult, cosineSimilarity, scoreEmbeddings } from "./utils";
export interface LLMChatOptions {
    messages?: OpenAIMessage[];
    stream?: boolean;
    template?: string;
    inputs?: object;
    onStream?: ChatStreamCallback;
}
export interface LLMEmbedOptions {
    input: string | string[];
    user?: string;
}
export interface LLMRecordOptions {
    deviceId?: string;
}
export interface LLMTranscribeOptions {
    audioUrl: string;
    language?: string;
    prompt?: string;
}
export interface GenerateImageOptions {
    prompt: string;
    n?: number;
    size?: "256x256" | "512x512" | "1024x1024";
}
export interface UseLLMOptions {
    serviceUrl?: string;
    fetcher?: typeof fetch;
}
export interface SpeakOptions {
    text: string;
    model_id?: string;
    voice_id?: string;
    voice_settings?: {
        stability: number;
        similarity_boost: number;
    };
}
export interface EditImageOptions {
    imageUrl: string;
    maskUrl?: string;
    prompt?: string;
    n?: number;
    size?: "256x256" | "512x512" | "1024x1024";
}
export interface ImageVariationOptions {
    imageUrl: string;
    n?: number;
    size?: "256x256" | "512x512" | "1024x1024";
}
export default function useLLM({ serviceUrl: argServiceUrl, fetcher, }?: UseLLMOptions): {
    chat: ({ messages, stream, template, inputs, onStream, }: LLMChatOptions) => Promise<LLMChatResult>;
    record: ({ deviceId }?: LLMRecordOptions) => Promise<void>;
    stopRecording: () => Promise<{
        audioUrl: string;
    }>;
    transcribe: ({ audioUrl, language, prompt, }: LLMTranscribeOptions) => Promise<any>;
    embed: ({ input, user }: LLMEmbedOptions) => Promise<any>;
    cosineSimilarity: typeof cosineSimilarity;
    scoreEmbeddings: typeof scoreEmbeddings;
    speak: (options: SpeakOptions) => Promise<any>;
    generateImage: (options: GenerateImageOptions) => Promise<any>;
    fileToDataURL: (file: File) => Promise<string>;
    imageToDataURL: (file: File) => Promise<string>;
    editImage: (options: EditImageOptions) => Promise<any>;
    imageVariation: (options: ImageVariationOptions) => Promise<any>;
};
